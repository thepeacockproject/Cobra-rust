//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "competition")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "contractId")]
    pub contract_id: u32,
    #[sea_orm(column_name = "endTime")]
    pub end_time: DateTimeUtc,
    #[sea_orm(column_name = "allowInvites")]
    pub allow_invites: bool,
    pub creator: u64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contract::Entity",
        from = "Column::ContractId",
        to = "super::contract::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Contract,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Creator",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::contract::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contract.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::competitionscore::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::competitionscore::Relation::Competition.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
