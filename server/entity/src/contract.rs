//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "contract")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u32,
    #[sea_orm(column_name = "displayId", unique)]
    pub display_id: String,
    pub title: String,
    pub description: String,
    #[sea_orm(column_name = "steamId")]
    pub steam_id: u64,
    #[sea_orm(column_name = "levelIdx")]
    pub level_idx: i32,
    #[sea_orm(column_name = "checkpointIdx")]
    pub checkpoint_idx: i32,
    pub difficulty: i32,
    #[sea_orm(column_name = "exitId")]
    pub exit_id: i32,
    #[sea_orm(column_name = "weaponToken")]
    pub weapon_token: i32,
    #[sea_orm(column_name = "outfitToken")]
    pub outfit_token: i32,
    pub target1: u32,
    pub target2: Option<u32>,
    pub target3: Option<u32>,
    pub restrictions: u8,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::competition::Entity")]
    Competition,
    #[sea_orm(
        belongs_to = "super::target::Entity",
        from = "Column::Target1",
        to = "super::target::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Target3,
    #[sea_orm(
        belongs_to = "super::target::Entity",
        from = "Column::Target2",
        to = "super::target::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Target2,
    #[sea_orm(
        belongs_to = "super::target::Entity",
        from = "Column::Target3",
        to = "super::target::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Target1,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::SteamId",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::competition::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Competition.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::contractscore::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contractscore::Relation::Contract.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
